@using System.Collections.ObjectModel
@using System.Collections.Specialized
@using Lexicom.Validation

<div class="lexicom-textinput-border @(IsValid ? "lexicom-textinput-border-valid" : "lexicom-textinput-border-invalid")">
    <input class="lexicom-textinput-input @(IsValid ? "lexicom-textinput-input-valid" : "lexicom-textinput-input-invalid")" type="text" placeholder="@Hint" @bind="Text" @bind:event="oninput" @bind:after="InputTextChanged" @onkeypress="OnKeyPressAsync" />
    <div class="lexicom-textinput-errors-border @(IsValid ? "lexicom-textinput-errors-border-valid" : "lexicom-textinput-errors-border-invalid")">
        <ul class="lexicom-textinput-errors @(IsValid ? "lexicom-textinput-errors-valid" : "lexicom-textinput-errors-invalid")">
            @foreach (string error in Errors)
            {
                <li class="lexicom-textinput-error @(IsValid ? "lexicom-textinput-error-valid" : "lexicom-textinput-error-invalid")">
                    @error
                </li>
            }
        </ul>
    </div>
</div>

@code {
    [Parameter]
    public string? Hint { get; set; }

    [Parameter]
    public string? Text { get; set; }

    private IRuleSetValidator<string?>? _validator;
#pragma warning disable BL0007 // we are not updating the view in this code, only updating other parameters
    [Parameter]
    public IRuleSetValidator<string?>? Validator
    {
        get => _validator;
        set
        {
            _validator = value;

            Validation = _validator?.Validation;
            Errors = _validator?.ValidationErrors ?? [];
        }
    }
#pragma warning restore BL0007

    [Parameter]
    public Func<string?, IEnumerable<string>>? Validation { get; set; }

    private ObservableCollection<string> _errors = [];
    [Parameter]
#pragma warning disable BL0007 // we are not updating the view in this code, only adding/removing event triggers so we should be safe
    public ObservableCollection<string> Errors
    {
        get => _errors;
        set
        {
            if (Errors is not null)
            {
                Errors.CollectionChanged -= ErrorsCollectionChanged;
            }

            _errors = value;

            if (Errors is null)
            {
                throw new Exception("hjkasdhjlasdjklasjkld!!!");
            }

            Errors.CollectionChanged += ErrorsCollectionChanged;
        }
    }
#pragma warning restore BL0007

    [Parameter]
    public int? ErrorsMaxLines { get; set; }

    [Parameter]
    public bool IsValid { get; set; }

    [Parameter]
    public EventCallback<string?> EnterPressed { get; set; }

    [Parameter]
    public EventCallback<string?> TextChanged { get; set; }

    [Parameter]
    public EventCallback<bool> IsValidChanged { get; set; }

    private void ErrorsCollectionChanged(object? sender, NotifyCollectionChangedEventArgs e)
    {
        IsValid = Errors is null || !Errors.Any();

        StateHasChanged();
    }

    private async Task OnKeyPressAsync(KeyboardEventArgs e)
    {
        if (e.Code is "Enter")
        {
            await EnterPressed.InvokeAsync(Text);
        }
    }

    private async Task InputTextChanged()
    {
        bool newIsValid;
        if (Validation is not null)
        {
            IEnumerable<string?> errors = Validation.Invoke(Text);

            if (ErrorsMaxLines is not null)
            {
                errors = errors.Take(ErrorsMaxLines.Value);
            }

            Errors.Clear();
            foreach (string? error in errors)
            {
                if (error is not null)
                {
                    Errors.Add(error);
                }
            }

            newIsValid = !Errors.Any();

            await InvokeAsync(StateHasChanged);
        }
        else
        {
            newIsValid = true;
        }

        await TextChanged.InvokeAsync(Text);

        if (IsValid != newIsValid)
        {
            IsValid = newIsValid;

            await IsValidChanged.InvokeAsync(IsValid);
        }
    }
}
